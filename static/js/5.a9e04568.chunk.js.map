{"version":3,"sources":["data/weather-data.js","components/Weather.jsx"],"names":["WeatherData","temp","0","1","2","windSpeed","windDeg","3","4","declOfNum","n","text_forms","n1","Math","abs","windDegMaker","connect","state","weather","pressure","humidity","isFetching","getWeatherDataTC","useEffect","className","Preloader","tempColor"],"mappings":"yKAAMA,EAAc,CAChBC,KAAM,CACFC,EAAG,mDACHC,EAAG,6CACHC,EAAG,wCAEPC,UAAW,CACPH,EAAG,uCACHC,EAAG,iCACHC,EAAG,4BAEPE,QAAS,CACLJ,EAAG,4EACHC,EAAG,0DACHC,EAAG,oDACHG,EAAG,sEACHC,EAAG,0GAIJ,SAASC,EAAUC,EAAGC,GAEzB,IAAIC,GADJF,EAAIG,KAAKC,IAAIJ,GAAK,KACL,GAEb,OAAIA,EAAI,IAAMA,EAAI,GAAaC,EAAW,GACtCC,EAAK,GAAKA,EAAK,EAAYD,EAAW,GAC/B,IAAPC,EAAmBD,EAAW,GAC3BA,EAAW,GAGf,SAASI,EAAaT,GACzB,OAAI,EAAIA,EAAU,GACPN,EAAYM,QAAQ,GACpB,GAAKA,EAAU,IACfN,EAAYM,QAAQ,GACpB,IAAMA,EAAU,IAChBN,EAAYM,QAAQ,GACpB,IAAMA,EAAU,IAChBN,EAAYM,QAAQ,GAEpBN,EAAYM,QAAQ,GAIpBN,Q,OCSAgB,uBAXO,SAACC,GACnB,MAAO,CACHhB,KAAMgB,EAAMC,QAAQjB,KACpBkB,SAAUF,EAAMC,QAAQC,SACxBC,SAAUH,EAAMC,QAAQE,SACxBf,UAAWY,EAAMC,QAAQb,UACzBC,QAASW,EAAMC,QAAQZ,QACvBe,WAAYJ,EAAMC,QAAQG,cAIM,CAACC,sBAA1BN,EA/CC,SAAC,GAAkF,IAAjFf,EAAgF,EAAhFA,KAAMkB,EAA0E,EAA1EA,SAAUC,EAAgE,EAAhEA,SAAUf,EAAsD,EAAtDA,UAAWC,EAA2C,EAA3CA,QAASgB,EAAkC,EAAlCA,iBAAkBD,EAAgB,EAAhBA,WAE9EE,qBAAU,WACND,MACD,IAYH,OACI,sBAAKE,UAAU,UAAf,UACI,sEACCH,EACG,cAACI,EAAA,EAAD,IACA,gCACI,2IAhBA,SAACxB,GACb,OAAIA,EAAO,GACA,sBAAMuB,UAAW,MAAjB,SAAyBvB,IACzBA,EAAO,EACP,sBAAMuB,UAAW,OAAjB,SAA0BvB,IAE1B,sBAAMuB,UAAW,YAAjB,SAA+BvB,IAULyB,CAAUzB,GAAnC,IAA2CQ,EAAUR,EAAMD,EAAYC,SACvE,mFAAa,sBAAMuB,UAAU,YAAhB,SAA6BL,IAA1C,qGAAiF,uBAC7EK,UAAU,YADmE,UACtDJ,EADsD,UAGjF,iEAAU,sBACNI,UAAU,YADJ,SACiBnB,IAD3B,IAC8CI,EAAUJ,EAAWL,EAAYK,WAD/E,6FAEqB,sBAAMmB,UAAU,YAAhB,SAA6BT,EAAaT","file":"static/js/5.a9e04568.chunk.js","sourcesContent":["const WeatherData = {\r\n    temp: {\r\n        0: 'градусов',\r\n        1: 'градуса',\r\n        2: 'градус'\r\n    },\r\n    windSpeed: {\r\n        0: 'метров',\r\n        1: 'метра',\r\n        2: 'метр'\r\n    },\r\n    windDeg: {\r\n        0: 'северо-восток',\r\n        1: 'юго-восток',\r\n        2: 'юго-запад',\r\n        3: 'северо-запад',\r\n        4: 'все четыре стороны :)'\r\n    }\r\n}\r\n\r\nexport function declOfNum(n, text_forms) {\r\n    n = Math.abs(n) % 100;\r\n    let n1 = n % 10;\r\n\r\n    if (n > 10 && n < 20) { return text_forms[0]; }\r\n    if (n1 > 1 && n1 < 5) { return text_forms[1]; }\r\n    if (n1 === 1) { return text_forms[2]; }\r\n    return text_forms[0];\r\n}\r\n\r\nexport function windDegMaker(windDeg) {\r\n    if (0 < windDeg < 90) {\r\n        return WeatherData.windDeg[0]\r\n    } else if (91 < windDeg < 180) {\r\n        return WeatherData.windDeg[1]\r\n    } else if (181 < windDeg < 270) {\r\n        return WeatherData.windDeg[2]\r\n    } else if (271 < windDeg < 360) {\r\n        return WeatherData.windDeg[3]\r\n    } else {\r\n        return WeatherData.windDeg[4]\r\n    }\r\n}\r\n\r\nexport default WeatherData","import React, {useEffect} from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {getWeatherDataTC} from \"../redux/weatherReducer\";\r\nimport Preloader from \"./commons/Preloader\";\r\nimport WeatherData, {declOfNum, windDegMaker} from '../data/weather-data'\r\n\r\nconst Weather = ({temp, pressure, humidity, windSpeed, windDeg, getWeatherDataTC, isFetching}) => {\r\n\r\n    useEffect(() => {\r\n        getWeatherDataTC()\r\n    }, [])\r\n\r\n    let tempColor = (temp) => {\r\n        if (temp > 20) {\r\n            return <span className={'red'}>{temp}</span>\r\n        } else if (temp < 0) {\r\n            return <span className={'blue'}>{temp}</span>\r\n        } else {\r\n            return <span className={'secondary'}>{temp}</span>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <h1>Погода</h1>\r\n            {isFetching ?\r\n                <Preloader/> :\r\n                <div>\r\n                    <h3>В сыктывкаре сейчас {tempColor(temp)} {declOfNum(temp, WeatherData.temp)}</h3>\r\n                    <h3>Давление <span className=\"secondary\">{pressure}</span> мм рт. ст., влажность <span\r\n                        className=\"secondary\">{humidity}%</span>\r\n                    </h3>\r\n                    <h3>Ветер <span\r\n                        className=\"secondary\">{windSpeed}</span> {declOfNum(windSpeed, WeatherData.windSpeed)} в\r\n                        секунду, дует на <span className=\"secondary\">{windDegMaker(windDeg)}</span>\r\n                    </h3>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        temp: state.weather.temp,\r\n        pressure: state.weather.pressure,\r\n        humidity: state.weather.humidity,\r\n        windSpeed: state.weather.windSpeed,\r\n        windDeg: state.weather.windDeg,\r\n        isFetching: state.weather.isFetching\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {getWeatherDataTC})(Weather)"],"sourceRoot":""}