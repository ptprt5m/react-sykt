{"version":3,"sources":["data/weather-data.js","components/Weather.jsx"],"names":["WeatherData","temp","0","1","2","windSpeed","windDeg","3","4","declOfNum","n","text_forms","n1","Math","abs","windDegMaker","connect","state","weather","feelsLike","pressure","humidity","weatherList","isFetching","isMiniFetching","getWeatherDataTC","getHourlyWeatherDataTC","useEffect","tempColor","className","Preloader","map","weatherDay","src","iconNumber","icon","alt","dt_txt","string","description","charAt","toUpperCase","slice","round","main","feels_like","wind","speed","onClick"],"mappings":"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","file":"static/js/5.ee77a45e.chunk.js","sourcesContent":["const WeatherData = {\r\n    temp: {\r\n        0: 'градусов',\r\n        1: 'градуса',\r\n        2: 'градус'\r\n    },\r\n    windSpeed: {\r\n        0: 'метров',\r\n        1: 'метра',\r\n        2: 'метр'\r\n    },\r\n    windDeg: {\r\n        0: 'северо-восток',\r\n        1: 'юго-восток',\r\n        2: 'юго-запад',\r\n        3: 'северо-запад',\r\n        4: 'все четыре стороны :)'\r\n    }\r\n}\r\n\r\nexport function declOfNum(n, text_forms) {\r\n    n = Math.abs(n) % 100;\r\n    let n1 = n % 10;\r\n\r\n    if (n > 10 && n < 20) { return text_forms[0]; }\r\n    if (n1 > 1 && n1 < 5) { return text_forms[1]; }\r\n    if (n1 === 1) { return text_forms[2]; }\r\n    return text_forms[0];\r\n}\r\n\r\nexport function windDegMaker(windDeg) {\r\n    if (0 < windDeg < 90) {\r\n        return WeatherData.windDeg[0]\r\n    } else if (91 < windDeg < 180) {\r\n        return WeatherData.windDeg[1]\r\n    } else if (181 < windDeg < 270) {\r\n        return WeatherData.windDeg[2]\r\n    } else if (271 < windDeg < 360) {\r\n        return WeatherData.windDeg[3]\r\n    } else {\r\n        return WeatherData.windDeg[4]\r\n    }\r\n}\r\n\r\nexport default WeatherData","import React, {useEffect} from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {getHourlyWeatherDataTC, getWeatherDataTC} from \"../redux/weatherReducer\";\r\nimport Preloader from \"./commons/Preloader\";\r\nimport WeatherData, {declOfNum, windDegMaker} from '../data/weather-data'\r\n\r\nconst Weather = ({\r\n                     temp, feelsLike, pressure, humidity, windSpeed, weatherList,\r\n                     windDeg, getWeatherDataTC, getHourlyWeatherDataTC,\r\n                     isFetching, isMiniFetching\r\n                 }) => {\r\n\r\n    useEffect(() => {\r\n        getWeatherDataTC()\r\n    }, [])\r\n\r\n    let tempColor = (temp) => {\r\n        if (temp > 20) {\r\n            return <span className={'red'}>{temp}</span>\r\n        } else if (temp < 0) {\r\n            return <span className={'blue'}>{temp}</span>\r\n        } else {\r\n            return <span className={'secondary'}>{temp}</span>\r\n        }\r\n    }\r\n\r\n    let getWeatherIcon = (iconNumber) => {\r\n        return `https://openweathermap.org/img/wn/${iconNumber}@2x.png`\r\n    }\r\n\r\n    function capitalizeFirstLetter(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <h1>Погода</h1>\r\n            {isFetching ?\r\n                <Preloader/> :\r\n                <div>\r\n                    <h3>В Сыктывкаре сейчас {tempColor(temp)} {declOfNum(temp, WeatherData.temp)}, ощущается\r\n                        как {tempColor(feelsLike)}</h3>\r\n                    <h3>Давление <span className=\"secondary\">{pressure}</span> мм рт. ст., влажность <span\r\n                        className=\"secondary\">{humidity}%</span>\r\n                    </h3>\r\n                    <h3>Ветер <span\r\n                        className=\"secondary\">{windSpeed}</span> {declOfNum(windSpeed, WeatherData.windSpeed)} в\r\n                        секунду, дует на <span className=\"secondary\">{windDegMaker(windDeg)}</span>\r\n                    </h3>\r\n                </div>\r\n            }\r\n            {isMiniFetching ?\r\n                <Preloader/> :\r\n                <div className=\"main__wrapper-weather\">\r\n                    {weatherList.map(weatherDay => {\r\n                        return (\r\n                            <div className=\"main__wrapper-weather-block\">\r\n                                <img src={getWeatherIcon(weatherDay.weather[0].icon)} alt=\"\"/>\r\n                                <div className=\"main__wrapper-weather-block-right\">\r\n                                    <h3>Дата <span className=\"secondary\">{weatherDay.dt_txt}</span></h3>\r\n                                    <p>{capitalizeFirstLetter(weatherDay.weather[0].description)}</p>\r\n                                    <p>{tempColor(Math.round(weatherDay.main.temp))} {declOfNum(weatherDay.main.temp, WeatherData.temp)},\r\n                                        ощущается как {tempColor(Math.round(weatherDay.main.feels_like))}</p>\r\n                                    <p>ветер <span className=\"secondary\">{weatherDay.wind.speed}</span> м/с</p>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            }\r\n            <button onClick={() => {\r\n                getHourlyWeatherDataTC()\r\n\r\n            }}\r\n                    className=\"all__button\">\r\n                Получить погоду на другие дни\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        temp: state.weather.temp,\r\n        feelsLike: state.weather.feelsLike,\r\n        pressure: state.weather.pressure,\r\n        humidity: state.weather.humidity,\r\n        windSpeed: state.weather.windSpeed,\r\n        windDeg: state.weather.windDeg,\r\n        weatherList: state.weather.weatherList,\r\n        isFetching: state.weather.isFetching,\r\n        isMiniFetching: state.weather.isMiniFetching\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    getWeatherDataTC,\r\n    getHourlyWeatherDataTC\r\n})(Weather)"],"sourceRoot":""}